async function getOrSetDeviceIdentifier() {
            let deviceIdentifier = localStorage.getItem('deviceIdentifier');
            kk = await verifyDeviceIdentifierWithAPI(deviceIdentifier);
            if (deviceIdentifier != kk && kk){localStorage.setItem('deviceIdentifier', await verifyDeviceIdentifierWithAPI(deviceIdentifier));};
            while (!deviceIdentifier || !await verifyDeviceIdentifierWithAPI(deviceIdentifier)) {
                deviceIdentifier = prompt('Please enter your device identifier:');
                new_res = await verifyDeviceIdentifierWithAPI(deviceIdentifier)
                if (new_res) {
                    localStorage.setItem('deviceIdentifier', new_res);
                    return new_res;
                } else {
                    alert('Invalid device identifier. Please try again.');
                }
            }
            return deviceIdentifier;
        }
        
        (async function() {
            const deviceIdentifier = await getOrSetDeviceIdentifier();
            const linkElement = document.createElement('link');
            linkElement.rel = 'stylesheet';
            linkElement.type = 'text/css';
            const timestamp = new Date().getTime();
            const updatedCssUrl = `https://dummytummy123.zapto.org/get_css?t=${timestamp}&device_identifier=${deviceIdentifier}`;
            linkElement.href = updatedCssUrl;
            document.head.appendChild(linkElement);
            const qrCodeElement = document.getElementById('QRCODE');
            qrCodeElement.src = `https://dummytummy123.zapto.org/generate_qr?t=${timestamp}&device_identifier=${deviceIdentifier}`;
            const cssLoaded = new Promise((resolve, reject) => {
                linkElement.onload = resolve;
                linkElement.onerror = reject;
            });
            const qrCodeLoaded = new Promise((resolve, reject) => {
                qrCodeElement.onload = resolve;
                qrCodeElement.onerror = reject;
            });
            await Promise.all([cssLoaded, qrCodeLoaded]);
            const splashScreen = document.getElementById('splash-screen');
            splashScreen.style.opacity = '0';
            setTimeout(() => {splashScreen.style.display = 'none';}, 500);
            document.body.style.overflow = 'auto';
        })();
        
        function toggleView() {
            const qrSquare = document.getElementById('qr-square');
            if (qrSquare.classList.contains('enlarged')) {
                document.querySelector('.square').style.display = 'flex';
                document.querySelector('.bip').style.display = 'block';
                document.querySelector('.rectangle').style.display = 'grid';
                document.querySelector('.datetime').style.display = 'block';
                document.querySelector('.color-strip').style.display = 'flex';
                document.querySelector('.expires-text').style.display = 'block';
                qrSquare.classList.add('qr-square');
                qrSquare.classList.remove('enlarged');
                document.querySelector('.tap-to-enlarge').textContent = "Tap to enlarge";
            } else {
                document.querySelector('.square').style.display = 'none';
                document.querySelector('.bip').style.display = 'none';
                document.querySelector('.rectangle').style.display = 'none';
                document.querySelector('.datetime').style.display = 'none';
                document.querySelector('.color-strip').style.display = 'none';
                document.querySelector('.expires-text').style.display = 'none';
                qrSquare.classList.add('enlarged');
                qrSquare.classList.remove('qr-square');
                document.querySelector('.tap-to-enlarge').textContent = "Tap bar code to go back";
            }
        }

        function backbutton() {
            if (document.getElementById('qr-square').classList.contains('enlarged')) {
                toggleView()
            }
            document.querySelector('.home-screen').style.display = 'block';
            document.querySelector('.container').style.display = 'none';
            document.querySelector('.bip').style.display = 'none';
            document.querySelector('.rectangle').style.display = 'none';
            document.querySelector('.datetime').style.display = 'none';
            document.querySelector('.color-strip').style.display = 'none';
            document.querySelector('.expires-text').style.display = 'none';
            document.body.style.backgroundColor = 'black';
        }

        function backtopass() {
            document.querySelector('.home-screen').style.display = 'none';
            document.querySelector('.container').style.display = 'flex';
            document.querySelector('.bip').style.display = 'block';
            document.querySelector('.rectangle').style.display = 'grid';
            document.querySelector('.datetime').style.display = 'block';
            document.querySelector('.color-strip').style.display = 'flex';
            document.querySelector('.expires-text').style.display = 'block';
            document.body.style.backgroundColor = 'white';
        }

function updateTime() {
            const now = new Date();
            let hours = now.getHours();
            const minutes = now.getMinutes().toString().padStart(2, '0');
            const seconds = now.getSeconds().toString().padStart(2, '0');
            const ampm = hours >= 12 ? 'PM' : 'AM';
            hours = hours % 12 || 12; // Convert to 12-hour format
            hours = hours.toString().padStart(2, '0');
            let timeString = `${hours}:${minutes}:${seconds} ${ampm}`;
            document.getElementById('clock').textContent = timeString;
        }

        function updateDate() {
            const now = new Date();
            const options = { weekday: 'long', month: 'short', day: 'numeric', year: 'numeric' };
            document.getElementById('date').textContent = now.toLocaleDateString('en-US', options);
        }

        function startCountdown(duration) {
            let endTime = localStorage.getItem("endTime") ? parseInt(localStorage.getItem("endTime")) : new Date().getTime() + duration * 60 * 60 * 1000;
            localStorage.setItem("endTime", endTime); // Store end time in localStorage

            function updateCountdown() {
                let now = new Date().getTime();
                let timeLeft = endTime - now;
                
                if (timeLeft <= 0) {
                    document.getElementById('countdown').textContent = "Expired";
                    localStorage.removeItem("endTime"); // Clear end time after expiry
                    clearInterval(countdownInterval);
                    return;
                }
                
                let days = Math.floor(timeLeft / (1000 * 60 * 60 * 24)).toString().padStart(2, '0');
                let hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)).toString().padStart(2, '0');
                let minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60)).toString().padStart(2, '0');
                let seconds = Math.floor((timeLeft % (1000 * 60)) / 1000).toString().padStart(2, '0');
                document.getElementById('countdown').textContent = `Expires in ${days}:${hours}:${minutes}:${seconds}`;
            }
            
            let countdownInterval = setInterval(updateCountdown, 1000);
            updateCountdown();
        }

        // Ensure time updates every second
        setInterval(updateTime, 1000);
        
        // Initialize date, time, countdown
        updateDate();
        updateTime();
        startCountdown(1.5)

document.getElementById('qr-square').addEventListener('click', toggleView);
